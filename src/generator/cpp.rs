use super::Generator;
use crate::field::FieldKind;
use std::{borrow::Cow, mem::take};

pub struct CppGenerator {
    predecls: String,
    main: String,
    offset: usize,
    last_offset: usize,
}

impl Default for CppGenerator {
    fn default() -> Self {
        Self {
            predecls: format!(
                "// Generated by YClass {}\n// Made by @ItsEthra\n\n#include <cstdint>\n\n",
                env!("YCLASS_VERSION")
            ),
            main: "".to_owned(),
            offset: 0,
            last_offset: 0,
        }
    }
}

impl Generator for CppGenerator {
    fn begin_class(&mut self, name: &str) {
        self.predecls += &format!("class {name};\n");
        self.main += &format!("class {name} {{\npublic:\n");
    }

    fn end_class(&mut self) {
        self.main += "};\n\n";
        self.offset = 0;
        self.last_offset = 0;
    }

    fn add_field(&mut self, name: &str, kind: FieldKind, metadata: Option<&str>) {
        let size = kind.size();
        if self.offset != self.last_offset {
            self.main += &format!(
                "    char _pad0x{:x}[0x{:x}];\n",
                self.offset,
                self.offset - self.last_offset
            );
        }

        self.main += &format!("    {} {name};\n", kind_to_type(kind, metadata));

        self.offset += size;
        self.last_offset = self.offset;
    }

    fn add_offset(&mut self, offset: usize) {
        self.offset += offset;
    }

    fn finilize(&mut self) -> String {
        take(&mut self.predecls) + "\n" + &take(&mut self.main)
    }
}

fn kind_to_type(kind: FieldKind, metadata: Option<&str>) -> Cow<'static, str> {
    match kind {
        FieldKind::Unk8 | FieldKind::Unk16 | FieldKind::Unk32 | FieldKind::Unk64 => unreachable!(),
        FieldKind::I8 => "int8_t".into(),
        FieldKind::U8 => "uint8_t".into(),
        FieldKind::I16 => "int16_t".into(),
        FieldKind::U16 => "uint16_t".into(),
        FieldKind::I32 => "int32_t".into(),
        FieldKind::U32 => "uint32_t".into(),
        FieldKind::I64 => "int64_t".into(),
        FieldKind::U64 => "uint64_t".into(),
        FieldKind::F32 => "float".into(),
        FieldKind::F64 => "double".into(),
        FieldKind::Ptr => format!("{}*", metadata.unwrap_or("void")).into(),
        FieldKind::StrPtr => "const char*".into(),
        FieldKind::WStrPtr => "const wchar*".into(),
        FieldKind::Bool => "bool".into(),
    }
}
